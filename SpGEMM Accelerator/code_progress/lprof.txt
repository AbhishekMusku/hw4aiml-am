Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def item_based_collaborative_filtering(user_item_matrix, k=10):
     7                                               """
     8                                               Item-based collaborative filtering recommendation system
     9
    10                                               Parameters:
    11                                               - user_item_matrix: Sparse matrix (users × items) of ratings or interactions
    12                                               - k: Number of similar items to consider
    13
    14                                               Returns:
    15                                               - recommendations: Matrix of predicted ratings
    16                                               """
    17                                               # Get dimensions
    18         1          7.1      7.1      0.0      n_users, n_items = user_item_matrix.shape
    19         1         23.8     23.8      0.0      print(f"Processing matrix with {n_users} users and {n_items} items")
    20
    21                                               # Step 1: Calculate item-item similarity matrix
    22         1          2.6      2.6      0.0      start_time = time.time()
    23         1          9.0      9.0      0.0      print("Calculating item-item similarity matrix...")
    24
    25                                               # Convert to CSR format for efficient operations5
    26         1          6.6      6.6      0.0      if not sparse.isspmatrix_csr(user_item_matrix):
    27                                                   user_item_matrix_csr = sparse.csr_matrix(user_item_matrix)
    28                                               else:
    29         1          0.5      0.5      0.0          user_item_matrix_csr = user_item_matrix
    30
    31                                               # Transpose to get item-user matrix
    32         1        367.3    367.3      0.0      item_user = user_item_matrix_csr.T
    33
    34                                               # Calculate similarity (cosine similarity)
    35                                               # This is a sparse × sparse matrix multiplication operation
    36                                               # This is the main bottleneck we'd offload to MATRaptor
    37         1     188238.1 188238.1      0.6      norms = sparse.linalg.norm(item_user, axis=1)
    38         1         87.8     87.8      0.0      norms[norms == 0] = 1  # Avoid division by zero
    39
    40                                               # Create diagonal matrix of inverse norms
    41         1        618.8    618.8      0.0      inv_norms = sparse.diags(1/norms)
    42
    43                                               # Normalize item vectors
    44         1     180390.6 180390.6      0.5      normalized_item_user = inv_norms @ item_user
    45
    46                                               # Calculate cosine similarity (sparse × sparse operation)
    47         1   19793967.0 19793967.0     59.9      item_similarity = normalized_item_user @ normalized_item_user.T
    48
    49         1          4.0      4.0      0.0      similarity_time = time.time() - start_time
    50         1         40.8     40.8      0.0      print(f"Similarity calculation took {similarity_time:.2f} seconds")
    51
    52                                               # Step 2: Keep only top k similar items for each item
    53         1          1.0      1.0      0.0      start_time = time.time()
    54         1          8.1      8.1      0.0      print(f"Filtering to keep only top {k} similar items...")
    55
    56                                               # Convert to array for top-k filtering (this could be optimized)
    57         1    5697517.5 5697517.5     17.2      item_similarity_array = item_similarity.toarray()
    58
    59                                               # For each item, keep only the top k most similar items
    60     20001       7627.9      0.4      0.0      for i in range(n_items):
    61     20000      17546.5      0.9      0.1          sim_items = item_similarity_array[i, :]
    62                                                   # Set the similarity with itself to 0
    63     20000      12748.5      0.6      0.0          sim_items[i] = 0
    64
    65                                                   # Find threshold for top k
    66     20000      13565.5      0.7      0.0          if len(sim_items) > k:
    67                                                       # Get kth largest value
    68     20000    1440432.2     72.0      4.4              threshold = np.partition(sim_items, -k)[-k]
    69                                                       # Set values below threshold to 0
    70     20000     672955.5     33.6      2.0              sim_items[sim_items < threshold] = 0
    71
    72                                               # Convert back to sparse matrix
    73         1    4219136.4 4219136.4     12.8      filtered_item_similarity = sparse.csr_matrix(item_similarity_array)
    74
    75         1          6.0      6.0      0.0      filter_time = time.time() - start_time
    76         1         45.1     45.1      0.0      print(f"Filtering took {filter_time:.2f} seconds")
    77
    78                                               # Step 3: Generate recommendations
    79         1          1.1      1.1      0.0      start_time = time.time()
    80         1          8.5      8.5      0.0      print("Generating recommendations...")
    81
    82                                               # This is another sparse × sparse matrix multiplication
    83                                               # Could also potentially be offloaded to MATRaptor
    84         1     798330.3 798330.3      2.4      recommendations = user_item_matrix_csr @ filtered_item_similarity
    85
    86         1          4.3      4.3      0.0      recommend_time = time.time() - start_time
    87         1         40.2     40.2      0.0      print(f"Recommendation generation took {recommend_time:.2f} seconds")
    88
    89         1          0.3      0.3      0.0      return recommendations
